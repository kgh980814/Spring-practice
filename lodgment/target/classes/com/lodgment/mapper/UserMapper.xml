<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lodgment.mapper.UserMapper">

<insert id="insert" parameterType="com.lodgment.domain.User">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select MAX(user_no)+1 from my_users
		</selectKey>
		insert into my_users
			(user_no, user_id, user_password, user_nickname, user_name, user_email, user_tel, user_address, user_login_type)
		values
			(#{no}, #{id}, #{password}, #{nickname}, #{name}, #{email}, #{tel}, #{address}, #{loginType})
	</insert>
<select id="getUserByNo" parameterType="int" resultType="com.lodgment.domain.User">
		select 
			user_no as no,
			user_id as id,
			user_password password,
			user_nickname nickname,
			user_name name,
			user_email email,
			user_tel tel,
			user_login_type loginType,
			user_disabled disabled,
			user_updated_date updatedDate,
			user_created_date createdDate
		from 
			my_users
		where
			user_no = #{value}
	</select>
	
	<select id="getUserById" parameterType="string" resultType="com.lodgment.domain.User">
		select 
			user_no as no,
			user_id as id,
			user_password password,
			user_nickname nickname,
			user_name name,
			user_email email,
			user_tel tel,
			user_login_type loginType,
			user_disabled disabled,
			user_updated_date updatedDate,
			user_created_date createdDate,
			user_authority authority
		from
			my_users
		where
			user_id = #{value}
	</select>
	
	<select id="getUserByEmail" parameterType="string" resultType="com.lodgment.domain.User">
		select 
			user_no as no,
			user_id as id,
			user_password password,
			user_nickname nickname,
			user_name name,
			user_email email,
			user_tel tel,
			user_login_type loginType,
			user_disabled disabled,
			user_updated_date updatedDate,
			user_created_date createdDate
		from 
			my_users
		where
			user_email = #{value}
	</select>
	
	
	<select id="getUserByName" parameterType="string" resultType="com.lodgment.domain.User">
		select 
			user_no as no,
			user_id as id,
			user_password password,
			user_nickname nickname,
			user_name name,
			user_email email,
			user_tel tel,
			user_login_type loginType,
			user_disabled disabled,
			user_updated_date updatedDate,
			user_created_date createdDate
		from
			my_users
		where
			user_name = #{value}
	</select>
	
	
	<update id="update" parameterType="com.lodgment.domain.User">
		update
			my_users
		set
			user_nickname = #{nickname},
			user_name = #{name},
			user_tel = #{tel},
			user_disabled = #{disabled},
			user_updated_date = now()
		where
			user_no = #{no}	
	</update>	
	
	<!-- String findId(@Param("name") String name, @Param("email")String email); 
       mapper 인터페이스에서 parameter 설정 parameterType 설정을 하지 않아도 된다.
   -->
   <select id="findId" resultType="string">
      select user_id
      from my_users
      where user_name = #{name} 
      and user_email = #{email}
   </select>
	
	<!-- 아이디와 비밀번호를 정보를 받아서 회원탈퇴 -->
	<delete id="withdraw" parameterType="string">
		delete from my_users 
		where user_id = #{id}
		and user_password = #{password}
	</delete>
	
	<!-- int finePwCheck(@Param("id") String id, @Param("email")String email); -->
    <select id="finePwCheck" parameterType="String" resultType="int">
       select count(user_id)
       from my_users
       where user_id = #{id}
       and user_email =#{email}
    </select>
        <!-- void updatePw(User user); -->
    <update id="updatePw" parameterType="com.lodgment.domain.User">
       update my_users
       set 
          user_password = #{password}
       where user_email = #{email}
    </update>

</mapper>